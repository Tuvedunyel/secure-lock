name: Deploy to VPS

on:
  push:
    branches: [ "main" ]   # change si besoin

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Cache composer
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'    # ou 8.3 selon ton serveur
          extensions: mbstring, xml, ctype, curl, dom, intl, zip, bcmath, mysql
          coverage: none

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer deps (no-dev, optimized)
        run: composer install --no-interaction --no-dev --prefer-dist --optimize-autoloader

      # Build front (Inertia/Vite)
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Node
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install & Build
        run: |
          npm ci
          npm run build

      # Prépare le package à envoyer (sans .git, tests, etc.)
      - name: Create deploy artifact directory
        run: |
          mkdir -p deploy
          rsync -a --delete \
            --exclude=".git" \
            --exclude=".github" \
            --exclude="tests" \
            --exclude="storage" \
            --exclude="node_modules" \
            ./ ./deploy/

      # Déploiement via rsync (copie incrémentale)
      - name: Rsync to VPS
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: -avzr --delete
          path: deploy/
          remote_path: ${{ secrets.DEPLOY_PATH }}/
          remote_host: ${{ secrets.SSH_HOST }}
          remote_user: ${{ secrets.SSH_USER }}
          remote_port: ${{ secrets.SSH_PORT }}
          remote_key: ${{ secrets.SSH_KEY }}

      # Commandes post-déploiement côté serveur
      - name: Post-deploy tasks (migrate, cache, permissions)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}

            # NE PAS écraser le .env : il reste côté serveur
            # Ajuste les permissions si besoin
            sudo chown -R www-data:www-data storage bootstrap/cache
            find storage -type d -exec chmod 775 {} \;
            find bootstrap/cache -type d -exec chmod 775 {} \;

            # Dépendances PHP côté serveur si tu préfères installer là-bas
            # (Si tes extensions/plateforme diffèrent de l'environnement CI)
            # composer install --no-interaction --no-dev --prefer-dist --optimize-autoloader

            # Migrations + caches
            php artisan migrate --force
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache

            # Assure-toi que le lien storage existe (au cas où)
            if [ ! -L public/storage ]; then
              php artisan storage:link || true
            fi

            # (Re)load Apache
            sudo systemctl reload apache2
